---
title: "BSA-GATK-doc"
author: "Deng Zhaoguo"
format: html
self-contained: true
date: "`r Sys.Date()`"
toc: true       # 显示目录
toc-depth: 5    # 显示三级标题
execute:
  eval: TRUE
  echo: TRUE
  warning: FALSE
  message: FALSE
---

# BSA，后面两个pool都是同步比对，同步 call SNP，最后合并 gVCF文件

# Sbatch环境设置，注意申请 c=8，后面有并行, 4 threads \*2

```{r, engine='bash', eval=FALSE}
#!/bin/bash
#SBATCH -J GTRC
#SBATCH -p Acluster
#SBATCH -n 1
#SBATCH -c 8
#SBATCH --output=%j.out
#SBATCH --error=%j.err

source /Share/samples/Acluster.sh
source /Share/home/dengzg1993/bin/DZG_env.sh
```

# set env

一般不用改，check一下即可

```{r, engine='bash', eval=FALSE}
WORKDIR=$(pwd)
TMPDIR=/Share/home/dengzg1993/tmp
REF_FASTA=/Data/ChenhaodongLab/Data_deposited/Reference_genome/Physcomitrella/Gd_v6.1/Ppatens_870_V6.fasta
SNP_SITES=/Share/home/dengzg1993/Analyses/DNASeq/Physcomitrella/1.WGS/05.Villersexel/2024.11.25_v6.1/4.annotate/Results/Vx.cohort.snp.final.vcf.gz
```

# 读取文件

```{r, engine='bash', eval=FALSE}
dos2unix $WORKDIR/sample_pool.tsv

# mut 样本
read SAMPLE_MUT READ1_MUT READ2_MUT PLOIDY_MUT DEPTH_MUT < <(awk 'NR==2 {print $1, $2, $3, $4, $5}' $WORKDIR/sample_pool.tsv)

# WT 样本
read SAMPLE_WT READ1_WT READ2_WT PLOIDY_WT DEPTH_WT < <(awk 'NR==3 {print $1, $2, $3, $4, $5}' $WORKDIR/sample_pool.tsv)
```

tsv例子：

![](images/BSA%20pool.jpg)

# 映射和去重

```{r, engine='bash', eval=FALSE}
mkdir -p $WORKDIR/report $WORKDIR/1.mapping $WORKDIR/2.variants $WORKDIR/3.output

# -----------------------------
# 记录日志函数
# -----------------------------
log_step() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}
log_step "开始任务"

# -----------------------------
# FastQC
# -----------------------------
log_step "执行 FastQC 检查"
fastqc -o $WORKDIR/report --noextract $READ1_MUT $READ2_MUT &> $WORKDIR/report/fastqc_m.log &
fastqc -o $WORKDIR/report --noextract $READ1_WT $READ2_WT &> $WORKDIR/report/fastqc_w.log &
wait

# -----------------------------
# 映射和去重
# -----------------------------
log_step "开始 Reads 映射和去重"
process_sample() {
    local sample_name=$1
    local read1=$2
    local read2=$3

    bwa mem -t 4 -M \
        -R "@RG\tID:$sample_name\tLB:$sample_name\tPL:ILLUMINA\tPM:HISEQ\tSM:$sample_name" \
        $REF_FASTA $read1 $read2 \
        | samtools view -Sb - \
        | samtools sort -o $WORKDIR/1.mapping/$sample_name.sorted.bam

    picard MarkDuplicates \
        -I $WORKDIR/1.mapping/$sample_name.sorted.bam \
        -M $WORKDIR/1.mapping/sorted_dedup_metrics-${sample_name}.txt \
        --TMP_DIR $TMPDIR \
        -O $WORKDIR/1.mapping/$sample_name.sorted_dedup_reads.bam

    samtools index $WORKDIR/1.mapping/$sample_name.sorted_dedup_reads.bam

    # 清理空间
    FILE_SIZE=$(du -k $WORKDIR/1.mapping/$sample_name.sorted_dedup_reads.bam | awk '{print $1}')
    if [ $FILE_SIZE -ge 1000000 ]; then
        rm $WORKDIR/1.mapping/$sample_name.sorted.bam
    fi
}

process_sample $SAMPLE_MUT $READ1_MUT $READ2_MUT &
process_sample $SAMPLE_WT $READ1_WT $READ2_WT &
wait
```

# 变异检测

```{r, engine='bash', eval=FALSE}
log_step "执行变异检测"

variant_calling() {
    local sample_name=$1
    local ploidy=$2

    gatk HaplotypeCaller -R $REF_FASTA \
        -I $WORKDIR/1.mapping/$sample_name.sorted_dedup_reads.bam \
        --intervals $SNP_SITES --sample-ploidy $ploidy -ERC GVCF \
        -O $WORKDIR/2.variants/$sample_name.g.vcf.gz
}

variant_calling $SAMPLE_MUT $PLOIDY_MUT &
variant_calling $SAMPLE_WT $PLOIDY_WT &
wait

log_step "合并变异文件"
gatk CombineGVCFs -R $REF_FASTA \
    --variant $WORKDIR/2.variants/$SAMPLE_MUT.g.vcf.gz \
    --variant $WORKDIR/2.variants/$SAMPLE_WT.g.vcf.gz \
    -O $WORKDIR/2.variants/Combine.g.vcf.gz

gatk GenotypeGVCFs -R $REF_FASTA \
    -V $WORKDIR/2.variants/Combine.g.vcf.gz \
    -O $WORKDIR/3.output/Combine.vcf.gz

mv $WORKDIR/2.variants/Combine.g.vcf.gz.tbi $WORKDIR/3.output/
```

# 提取等位基因频率

```{r, engine='bash', eval=FALSE}
# -----------------------------
# 提取等位基因频率
# -----------------------------
log_step "提取等位基因频率"
gatk VariantFiltration -R $REF_FASTA \
    -V $WORKDIR/3.output/Combine.vcf.gz \
    -O $WORKDIR/3.output/Combine.filter.vcf.gz \
    -filter-name "hard_filter" \
    -filter "QD < 2.0 || SOR > 3.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0"

gatk SelectVariants --exclude-filtered --select-type-to-include SNP \
    --restrict-alleles-to BIALLELIC \
    -select "vc.getGenotype('$SAMPLE_MUT').getDP() > 0.3 * $DEPTH_MUT" \
    -select "vc.getGenotype('$SAMPLE_MUT').getDP() < 3 * $DEPTH_MUT" \
    -select "vc.getGenotype('$SAMPLE_WT').getDP() > 0.3 * $DEPTH_WT" \
    -select "vc.getGenotype('$SAMPLE_WT').getDP() < 3 * $DEPTH_WT" \
    -V $WORKDIR/3.output/Combine.filter.vcf.gz \
    -O $WORKDIR/3.output/Combine.snp.cleaned.vcf.gz

gatk VariantsToTable -V $WORKDIR/3.output/Combine.snp.cleaned.vcf.gz \
    -F CHROM -F POS -GF AD \
    -O $WORKDIR/3.output/Combine.results_var_AD.table

log_step "任务结束"
```
